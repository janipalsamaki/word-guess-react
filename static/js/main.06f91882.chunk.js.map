{"version":3,"sources":["components/Letter/index.js","components/Alphabet/index.js","components/Category/index.js","components/GameResult/index.js","components/GuessesLeft/index.js","components/Flag/index.js","components/LanguageSwitcher/index.js","components/NewWord/index.js","components/Word/index.js","dictionaries/dictionary-en.js","dictionaries/dictionary-fi.js","dictionaries/dictionary-es.js","containers/App/index.js","index.js"],"names":["Letter","_ref","disabled","letter","onClick","role","classNames","ariaLabel","react_default","a","createElement","className","aria-disabled","aria-label","Alphabet","letters","react","Object","toConsumableArray","map","index","components_Letter","key","Category","category","concat","aria-describedby","id","GameResult","guessedTheWord","guessesLeft","inProgress","aria-hidden","lastChance","lost","won","GuessesLeft","Flag","language","flagClasses","LanguageSwitcher","languages","components_Flag","NewWord","getAriaLabel","word","pronouncedWord","join","Word","dictionary_en","words","dictionary_fi","dictionary_es","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","initialState","changeLanguage","bind","assertThisInitialized","selectLetter","startNewGame","addKeyPressListener","arguments","length","undefined","alphabet","getAlphabet","dictionary","getDictionaries","get","randomCategory","randomWord","guessedLetters","Set","dictionaries","Map","set","categories","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","entry","value","_entry","slicedToArray","object","push","err","return","Math","floor","random","toUpperCase","setState","selectedLetter","updateGameStatus","nextState","objectSpread","alreadyGuessedLetter","has","add","find","filter","includes","every","lettersFoundInWord","forEach","_this2","document","addEventListener","event","components_Alphabet","components_Category","components_Word","components_GuessesLeft","components_GameResult","components_LanguageSwitcher","components_NewWord","Component","ReactDOM","render","containers_App","getElementById"],"mappings":"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HE,EA5CF,SAAA/C,GAA8B,IAA3B4B,EAA2B5B,EAA3B4B,eAAgBgB,EAAW5C,EAAX4C,KACxBtC,EAAYqC,EAAaC,EAAMhB,GAGrC,OACErB,EAAAC,EAAAC,cAACM,EAAA,SAAD,KACER,EAAAC,EAAAC,cAAA,MACEC,UAAU,OACVE,aAAYN,EACZmB,mBAPkB,oBASjBT,OAAAC,EAAA,EAAAD,CAAI4B,GAAM1B,IAAI,SAAChB,EAAQiB,GAAT,OACbZ,EAAAC,EAAAC,cAACW,EAAD,CACEC,IAAKF,EACLjB,OAAQA,EAAOA,OACfD,SAAUC,EAAOD,SACjBE,QAAS,kBAIfI,EAAAC,EAAAC,cAAA,KAAGiB,GAlBiB,mBAkBIhB,UAAU,WAAlC,gJCmISsC,EA5JO,CACpB,CACEzB,SAAU,SACV0B,MAAO,CACL,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aAGJ,CACE1B,SAAU,UACV0B,MAAO,CAAC,SAAU,SAAU,SAAU,WAExC,CACE1B,SAAU,eACV0B,MAAO,CACL,SACA,UACA,YACA,WACA,SACA,WACA,WAGJ,CACE1B,SAAU,OACV0B,MAAO,CACL,MACA,MACA,UACA,aACA,SACA,SACA,eAGJ,CACE1B,SAAU,kBACV0B,MAAO,CACL,OACA,QACA,WACA,UACA,QACA,QACA,QACA,WACA,QACA,WACA,SACA,UACA,aACA,gBAGJ,CACE1B,SAAU,OACV0B,MAAO,CACL,QACA,QACA,UACA,YACA,eACA,YACA,YACA,kBAGJ,CACE1B,SAAU,SACV0B,MAAO,CACL,WACA,mBACA,cACA,QACA,OACA,aACA,eACA,kBACA,gBACA,OACA,UACA,MACA,UAGJ,CACE1B,SAAU,YACV0B,MAAO,CAAC,OAAQ,OAAQ,QAAS,MAAO,YAAa,UAAW,aAElE,CACE1B,SAAU,SACV0B,MAAO,CACL,SACA,aACA,WACA,aACA,aACA,gBACA,YACA,eACA,iBACA,cACA,cAGJ,CACE1B,SAAU,uBACV0B,MAAO,CACL,aACA,YACA,mBACA,iBACA,WACA,YACA,aACA,cACA,iBACA,gBACA,iBACA,OACA,OACA,WACA,kBAGJ,CACE1B,SAAU,SACV0B,MAAO,CACL,MACA,QACA,QACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,QACA,SACA,eCiGSC,EAxPO,CACpB,CACE3B,SAAU,YACV0B,MAAO,CACL,WACA,WACA,YACA,WACA,WACA,aACA,cACA,SACA,UACA,UACA,YACA,aAGJ,CACE1B,SAAU,aACV0B,MAAO,CAAC,WAAS,UAAQ,QAAS,UAEpC,CACE1B,SAAU,qBACV0B,MAAO,CACL,YACA,UACA,cACA,UACA,YACA,WACA,cAGJ,CACE1B,SAAU,qBACV0B,MAAO,CACL,QACA,QACA,WACA,QACA,aACA,YACA,eAGJ,CACE1B,SAAU,sBACV0B,MAAO,CACL,QACA,OACA,QACA,QACA,QACA,QACA,WACA,cACA,QACA,QACA,WACA,gBAGJ,CACE1B,SAAU,QACV0B,MAAO,CACL,OACA,WACA,QACA,SACA,SACA,QACA,QACA,OACA,UACA,YACA,SACA,UACA,QACA,SACA,SAGJ,CACE1B,SAAU,QACV0B,MAAO,CACL,UACA,sBACA,QACA,QACA,cACA,WACA,cACA,YACA,aACA,cACA,cACA,QACA,WACA,YAGJ,CACE1B,SAAU,QACV0B,MAAO,CACL,mBACA,UACA,QACA,aACA,aACA,iBACA,gBACA,sBACA,mBACA,aACA,aACA,UAGJ,CACE1B,SAAU,qBACV0B,MAAO,CACL,UACA,SACA,QACA,UACA,SACA,aACA,YACA,aACA,SACA,UACA,YACA,WACA,UACA,YACA,0BAGJ,CACE1B,SAAU,SACV0B,MAAO,CACL,WACA,eACA,YACA,OACA,QACA,WACA,iBACA,aACA,mBACA,OACA,QACA,QACA,cAGJ,CACE1B,SAAU,aACV0B,MAAO,CACL,cACA,QACA,QACA,WACA,aACA,UACA,cAGJ,CACE1B,SAAU,OACV0B,MAAO,CACL,QACA,WACA,QACA,WACA,QACA,QACA,UACA,SACA,UAGJ,CACE1B,SAAU,YACV0B,MAAO,CACL,aACA,iBACA,cACA,sBACA,cAGJ,CACE1B,SAAU,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","file":"static/js/main.06f91882.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Letter.css'\n\nconst Letter = ({ disabled, letter, onClick, role }) => {\n  const classNames =\n    letter === ' ' ? 'Letter space' : letter === '-' ? 'Letter dash' : 'Letter'\n\n  const ariaLabel = disabled ? letter : 'blank'\n\n  return (\n    <li\n      className={classNames}\n      role={role}\n      onClick={() => onClick(letter)}\n      disabled={disabled}\n      aria-disabled={disabled}\n    >\n      <button aria-label={ariaLabel}>{letter}</button>\n    </li>\n  )\n}\n\nLetter.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  letter: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  role: PropTypes.string\n}\n\nexport default Letter\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport Letter from '../Letter'\nimport './Alphabet.css'\n\nconst Alphabet = ({ letters, onClick }) => {\n  return (\n    <Fragment>\n      <ul className=\"Alphabet\">\n        {[...letters].map((letter, index) => {\n          return (\n            <Letter\n              key={index}\n              letter={letter.letter}\n              disabled={letter.disabled}\n              onClick={onClick}\n              role=\"button\"\n            />\n          )\n        })}\n      </ul>\n    </Fragment>\n  )\n}\n\nAlphabet.propTypes = {\n  letters: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Alphabet\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport './Category.css'\n\nconst Category = ({ category }) => {\n  const ariaLabel = `Category: ${category.category}.`\n  const ariaDescribedBy = 'category-description'\n\n  return (\n    <Fragment>\n      <div\n        className=\"Category\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n      >\n        {category.category}\n      </div>\n      <p id={ariaDescribedBy} className=\"sr-only\">\n        This is the category of the word to guess. Use keyboard to guess\n        letters.\n      </p>\n    </Fragment>\n  )\n}\n\nCategory.propTypes = {\n  category: PropTypes.object.isRequired\n}\n\nexport default Category\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './GameResult.css'\n\nconst GameResult = ({ guessedTheWord, guessesLeft }) => {\n  const inProgress = <i className=\"fa fa-smile-o\" aria-hidden=\"true\" />\n  const lastChance = <i className=\"fa fa-meh-o\" aria-hidden=\"true\" />\n  const lost = <i className=\"fa fa-frown-o\" aria-hidden=\"true\" />\n  const won = <i className=\"fa fa-thumbs-o-up\" aria-hidden=\"true\" />\n\n  return guessedTheWord ? (\n    <div className=\"GameResult\" aria-label=\"You won the game! Congratulations!\">\n      {won}\n    </div>\n  ) : guessesLeft > 1 ? (\n    <div className=\"GameResult\" aria-label=\"Game is in progress.\">\n      {inProgress}\n    </div>\n  ) : guessesLeft === 1 ? (\n    <div\n      className=\"GameResult\"\n      aria-label=\"You can guess wrong only one more time.\"\n    >\n      {lastChance}\n    </div>\n  ) : (\n    <div className=\"GameResult\" aria-label=\"You lost the game. Try again!\">\n      {lost}\n    </div>\n  )\n}\n\nGameResult.propTypes = {\n  guessedTheWord: PropTypes.bool.isRequired,\n  guessesLeft: PropTypes.number.isRequired\n}\n\nexport default GameResult\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './GuessesLeft.css'\n\nconst GuessesLeft = ({ guessesLeft }) => {\n  const ariaLabel = `Guesses left: ${guessesLeft}`\n\n  return (\n    <div className=\"GuessesLeft\" aria-label={ariaLabel}>\n      {guessesLeft}\n    </div>\n  )\n}\n\nGuessesLeft.propTypes = {\n  guessesLeft: PropTypes.number.isRequired\n}\n\nexport default GuessesLeft\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../../../node_modules/flag-icon-css/css/flag-icon.min.css'\nimport './Flag.css'\n\nconst Flag = ({ language, onClick }) => {\n  const ariaLabel = `Change language to \"${language}\"`\n  const flagClasses = `flag-icon flag-icon-${language}`\n  return (\n    <button\n      className=\"Flag\"\n      onClick={() => onClick(language)}\n      aria-label={ariaLabel}\n    >\n      <span className={flagClasses}>&nbsp;</span>\n    </button>\n  )\n}\n\nFlag.propTypes = {\n  language: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Flag\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Flag from '../Flag'\nimport './LanguageSwitcher.css'\n\nconst LanguageSwitcher = ({ languages, onClick }) => {\n  return (\n    <div className=\"LanguageSwitcher\">\n      {[...languages].map(language => (\n        <Flag key={language} language={language} onClick={onClick}>\n          {language}\n        </Flag>\n      ))}\n    </div>\n  )\n}\n\nLanguageSwitcher.propTypes = {\n  languages: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default LanguageSwitcher\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './NewWord.css'\n\nconst NewWord = ({ onClick }) => {\n  return (\n    <button\n      className=\"NewWord\"\n      onClick={() => onClick()}\n      aria-label=\"Start a new game\"\n    >\n      <i className=\"fa fa-arrow-right\" aria-hidden=\"true\" />\n    </button>\n  )\n}\n\nNewWord.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default NewWord\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport Letter from '../Letter'\nimport './Word.css'\n\nconst Word = ({ guessedTheWord, word }) => {\n  const ariaLabel = getAriaLabel(word, guessedTheWord)\n  const ariaDescribedBy = 'word-description'\n\n  return (\n    <Fragment>\n      <ul\n        className=\"Word\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n      >\n        {[...word].map((letter, index) => (\n          <Letter\n            key={index}\n            letter={letter.letter}\n            disabled={letter.disabled}\n            onClick={() => {}}\n          />\n        ))}\n      </ul>\n      <p id={ariaDescribedBy} className=\"sr-only\">\n        This is the word to be guessed. Correctly guessed letters are\n        pronounced. Other letters are pronounced as \"blank\" until guessed\n        correctly.\n      </p>\n    </Fragment>\n  )\n}\n\nconst getAriaLabel = (word, guessedTheWord) => {\n  const pronouncedWord = guessedTheWord\n    ? word\n    : [...word]\n        .map((letter, index) => (letter.disabled ? letter.letter : 'blank'))\n        .join(', ')\n\n  return `Word: ${pronouncedWord}`\n}\n\nWord.propTypes = {\n  guessedTheWord: PropTypes.bool.isRequired,\n  word: PropTypes.array.isRequired\n}\n\nexport default Word\n","const dictionary_en = [\n  {\n    category: 'Months',\n    words: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ]\n  },\n  {\n    category: 'Seasons',\n    words: ['Spring', 'Summer', 'Autumn', 'Winter']\n  },\n  {\n    category: 'Days of week',\n    words: [\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n      'Sunday'\n    ]\n  },\n  {\n    category: 'Pets',\n    words: [\n      'Dog',\n      'Cat',\n      'Hamster',\n      'Guinea pig',\n      'Turtle',\n      'Parrot',\n      'Budgerigar'\n    ]\n  },\n  {\n    category: 'African animals',\n    words: [\n      'Lion',\n      'Camel',\n      'Elephant',\n      'Giraffe',\n      'Zebra',\n      'Rhino',\n      'Hippo',\n      'Antelope',\n      'Hyena',\n      'Scorpion',\n      'Baboon',\n      'Gorilla',\n      'Chimpanzee',\n      'Constrictor'\n    ]\n  },\n  {\n    category: 'Food',\n    words: [\n      'Pasta',\n      'Pizza',\n      'Lasagne',\n      'Meatballs',\n      'Chicken soup',\n      'Fish soup',\n      'Hamburger',\n      'Cooked salmon'\n    ]\n  },\n  {\n    category: 'Drinks',\n    words: [\n      'Lemonade',\n      'Strawberry juice',\n      'Apple juice',\n      'Water',\n      'Milk',\n      'Buttermilk',\n      'Orange juice',\n      'Pineapple juice',\n      'Mineral water',\n      'Beer',\n      'Whiskey',\n      'Rum',\n      'Kvass'\n    ]\n  },\n  {\n    category: 'Furniture',\n    words: ['Desk', 'Sofa', 'Chair', 'Bed', 'Bookshelf', 'Dresser', 'Armchair']\n  },\n  {\n    category: 'Sports',\n    words: [\n      'Soccer',\n      'Basketball',\n      'Handball',\n      'Volleyball',\n      'Ice hockey',\n      'Javelin throw',\n      'Floorball',\n      'Discus throw',\n      'Figure skating',\n      'Ski jumping',\n      'Triathlon'\n    ]\n  },\n  {\n    category: 'Star Wars characters',\n    words: [\n      'Jango Fett',\n      'Boba Fett',\n      'Anakin Skywalker',\n      'Luke Skywalker',\n      'Han Solo',\n      'Chewbacca',\n      'Darth Maul',\n      'Darth Vader',\n      'Jabba the Hutt',\n      'Jar Jar Binks',\n      'Obi-Wan Kenobi',\n      'Yoda',\n      'Finn',\n      'Kylo Ren',\n      'Darth Sidious'\n    ]\n  },\n  {\n    category: 'Colors',\n    words: [\n      'Red',\n      'Green',\n      'Black',\n      'Blue',\n      'Yellow',\n      'White',\n      'Grey',\n      'Pink',\n      'Orange',\n      'Purple',\n      'Brown',\n      'Violet',\n      'Turquoise'\n    ]\n  }\n]\n\nexport default dictionary_en\n","const dictionary_fi = [\n  {\n    category: 'Kuukaudet',\n    words: [\n      'Tammikuu',\n      'Helmikuu',\n      'Maaliskuu',\n      'Huhtikuu',\n      'Toukukuu',\n      'Kesäkuu',\n      'Heinäkuu',\n      'Elokuu',\n      'Syyskuu',\n      'Lokakuu',\n      'Marraskuu',\n      'Joulukuu'\n    ]\n  },\n  {\n    category: 'Vuodenajat',\n    words: ['Kevät', 'Kesä', 'Syksy', 'Talvi']\n  },\n  {\n    category: 'Viikonpäivät',\n    words: [\n      'Maanantai',\n      'Tiistai',\n      'Keskiviikko',\n      'Torstai',\n      'Perjantai',\n      'Lauantai',\n      'Sunnuntai'\n    ]\n  },\n  {\n    category: 'Lemmikkieläimet',\n    words: [\n      'Koira',\n      'Kissa',\n      'Hamsteri',\n      'Marsu',\n      'Kilpikonna',\n      'Papukaija',\n      'Undulaatti'\n    ]\n  },\n  {\n    category: 'Metsäneläimet',\n    words: [\n      'Karhu',\n      'Susi',\n      'Kettu',\n      'Hirvi',\n      'Peura',\n      'Orava',\n      'Jänis',\n      'Pöllö',\n      'Siili',\n      'Hiiri',\n      'Myyrä',\n      'Liito-orava'\n    ]\n  },\n  {\n    category: 'Kalat',\n    words: [\n      'Made',\n      'Särki',\n      'Ahven',\n      'Muikku',\n      'Taimen',\n      'Hauki',\n      'Siika',\n      'Lohi',\n      'Silakka',\n      'Kirjolohi',\n      'Harjus',\n      'Kampela',\n      'Lahna',\n      'Kiiski',\n      'Kuha'\n    ]\n  },\n  {\n    category: 'Kukat',\n    words: [\n      'Orkidea',\n      'Päivänkakkara',\n      'Kielo',\n      'Ruusu',\n      'Kissankello',\n      'Voikukka',\n      'Leskenlehti',\n      'Tulppaani',\n      'Sinivuokko',\n      'Valkovuokko',\n      'Keltavuokko',\n      'Apila',\n      'Narsissi',\n      'Lupiini'\n    ]\n  },\n  {\n    category: 'Ruuat',\n    words: [\n      'Makaronilaatikko',\n      'Lasagne',\n      'Pizza',\n      'Lihapullat',\n      'Kalakeitto',\n      'Pinaattikeitto',\n      'Pinaattiletut',\n      'Siskonmakkarakeitto',\n      'Poronkäristys',\n      'Lihakeitto',\n      'Kanakeitto',\n      'Pasta'\n    ]\n  },\n  {\n    category: 'Afrikan eläimet',\n    words: [\n      'Leijona',\n      'Kameli',\n      'Norsu',\n      'Kirahvi',\n      'Seepra',\n      'Sarvikuono',\n      'Virtahepo',\n      'Antilooppi',\n      'Hyeena',\n      'Gebardi',\n      'Skorpioni',\n      'Paviaani',\n      'Gorilla',\n      'Simpanssi',\n      'Kuristajakäärme'\n    ]\n  },\n  {\n    category: 'Juomat',\n    words: [\n      'Limonadi',\n      'Mansikkamehu',\n      'Omenamehu',\n      'Vesi',\n      'Maito',\n      'Piimä',\n      'Appelsiinimehu',\n      'Ananasmehu',\n      'Kivennäisvesi',\n      'Olut',\n      'Viski',\n      'Rommi',\n      'Kotikalja'\n    ]\n  },\n  {\n    category: 'Huonekalut',\n    words: [\n      'Pöytä',\n      'Sohva',\n      'Tuoli',\n      'Sänky',\n      'Kirjahylly',\n      'Lipasto',\n      'Nojatuoli'\n    ]\n  },\n  {\n    category: 'Puut',\n    words: [\n      'Kuusi',\n      'Mänty',\n      'Koivu',\n      'Vaahtera',\n      'Tammi',\n      'Haapa',\n      'Pihlaja',\n      'Saarni',\n      'Tuomi'\n    ]\n  },\n  {\n    category: 'Ajoneuvot',\n    words: [\n      'Linja-auto',\n      'Henkilöauto',\n      'Kuorma-auto',\n      'Moottoripyörä',\n      'Skootteri'\n    ]\n  },\n  {\n    category: 'Urheilulajit',\n    words: [\n      'Jalkapallo',\n      'Koripallo',\n      'Käsipallo',\n      'Lentopallo',\n      'Jääkiekko',\n      'Keihäänheitto',\n      'Salibandy',\n      'Kiekonheitto',\n      'Taitoluistelu',\n      'Mäkihyppy',\n      'Triathlon'\n    ]\n  },\n  {\n    category: 'Star Wars -hahmot',\n    words: [\n      'Jango Fett',\n      'Boba Fett',\n      'Anakin Skywalker',\n      'Luke Skywalker',\n      'Han Solo',\n      'Chewbacca',\n      'Darth Maul',\n      'Darth Vader',\n      'Jabba the Hutt',\n      'Jar Jar Binks',\n      'Obi-Wan Kenobi',\n      'Yoda',\n      'Finn',\n      'Kylo Ren',\n      'Darth Sidious'\n    ]\n  },\n  {\n    category: 'Värit',\n    words: [\n      'Punainen',\n      'Vihreä',\n      'Sininen',\n      'Musta',\n      'Valkoinen',\n      'Keltainen',\n      'Vaaleanpunainen',\n      'Oranssi',\n      'Turkoosi',\n      'Violetti',\n      'Harmaa',\n      'Ruskea'\n    ]\n  }\n]\n\nexport default dictionary_fi\n","const dictionary_es = [\n  {\n    category: 'Meses del año',\n    words: [\n      'Enero',\n      'Febrero',\n      'Marzo',\n      'Abril',\n      'Mayo',\n      'Junio',\n      'Julio',\n      'Agosto',\n      'Septiembre',\n      'Octubre',\n      'Noviembre',\n      'Diciembre'\n    ]\n  },\n  {\n    category: 'Días de la semana',\n    words: [\n      'Lunes',\n      'Martes',\n      'Miércoles',\n      'Jueves',\n      'Viernes',\n      'Sábado',\n      'Domingo'\n    ]\n  }\n]\n\nexport default dictionary_es\n","import React, { Component, Fragment } from 'react'\nimport Alphabet from '../../components/Alphabet'\nimport Category from '../../components/Category'\nimport GameResult from '../../components/GameResult'\nimport GuessesLeft from '../../components/GuessesLeft'\nimport LanguageSwitcher from '../../components/LanguageSwitcher'\nimport NewWord from '../../components/NewWord'\nimport Word from '../../components/Word'\nimport dictionary_en from '../../dictionaries/dictionary-en'\nimport dictionary_fi from '../../dictionaries/dictionary-fi'\nimport dictionary_es from '../../dictionaries/dictionary-es'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.initialState()\n    this.changeLanguage = this.changeLanguage.bind(this)\n    this.selectLetter = this.selectLetter.bind(this)\n    this.startNewGame = this.startNewGame.bind(this)\n    this.addKeyPressListener()\n  }\n\n  initialState(language = 'gb') {\n    const alphabet = this.getAlphabet(language)\n    const letters = [...alphabet].map(letter => ({ letter, disabled: false }))\n    const dictionaries = this.getDictionaries()\n    const dictionary = dictionaries.get(language)\n    const category = this.randomCategory(dictionary)\n    const word = [...this.randomWord(category)].map(letter => ({\n      letter,\n      disabled: false\n    }))\n    const guessedLetters = new Set()\n    const guessesLeft = 5\n    const guessedTheWord = false\n\n    return {\n      alphabet,\n      letters,\n      language,\n      category,\n      word,\n      guessedLetters,\n      guessesLeft,\n      guessedTheWord\n    }\n  }\n\n  getAlphabet(language) {\n    const defaultAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    return language === 'gb'\n      ? defaultAlphabet\n      : language === 'fi'\n      ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ'\n      : language === 'es'\n      ? 'AÁBCDEÉFGHIÍJKLMNÑOÓPQRSTUÚÜVWXYZ'\n      : defaultAlphabet\n  }\n\n  getDictionaries() {\n    const dictionaries = new Map()\n    dictionaries.set('fi', dictionary_fi)\n    dictionaries.set('gb', dictionary_en)\n    dictionaries.set('es', dictionary_es)\n\n    return dictionaries\n  }\n\n  randomCategory(dictionary) {\n    const categories = []\n\n    for (const entry of dictionary.entries()) {\n      let [index, object] = entry\n      categories.push(object)\n    }\n\n    return categories[Math.floor(Math.random() * categories.length)]\n  }\n\n  randomWord(category) {\n    return category.words[\n      Math.floor(Math.random() * category.words.length)\n    ].toUpperCase()\n  }\n\n  changeLanguage(language) {\n    this.setState(this.initialState(language))\n  }\n\n  selectLetter(selectedLetter) {\n    this.updateGameStatus(this.state, selectedLetter)\n  }\n\n  updateGameStatus(state, selectedLetter) {\n    if (state.guessesLeft > 0 && !state.guessedTheWord) {\n      const nextState = { ...state }\n      const alreadyGuessedLetter = state.guessedLetters.has(selectedLetter)\n\n      if (!alreadyGuessedLetter) {\n        nextState.guessedLetters.add(selectedLetter)\n        nextState.letters.find(\n          letter => letter.letter === selectedLetter\n        ).disabled = true\n      }\n\n      const guessedTheWord = nextState.word\n        .filter(letter => !['-', ' '].includes(letter.letter))\n        .every(letter => nextState.guessedLetters.has(letter.letter))\n\n      const lettersFoundInWord =\n        nextState.word.filter(letter => letter.letter === selectedLetter)\n          .length > 0\n\n      if (guessedTheWord) {\n        nextState.guessedTheWord = true\n      } else if (!alreadyGuessedLetter && !lettersFoundInWord) {\n        nextState.guessesLeft--\n      }\n\n      nextState.word.forEach(letter =>\n        letter.letter === selectedLetter ? (letter.disabled = true) : ''\n      )\n\n      this.setState(nextState)\n    }\n  }\n\n  startNewGame() {\n    this.setState(this.initialState(this.state.language))\n  }\n\n  addKeyPressListener() {\n    document.addEventListener('keydown', event => {\n      const letter = event.key.toUpperCase()\n\n      if (this.state.alphabet.includes(letter)) {\n        this.selectLetter(letter)\n      }\n    })\n  }\n\n  render() {\n    const languages = ['fi', 'gb', 'es']\n\n    return (\n      <Fragment>\n        <p className=\"sr-only\">\n          Welcome to play word guess game. Try to guess the word from the given\n          category. Use keyboard to guess the letters.\n        </p>\n        <Alphabet letters={this.state.letters} onClick={this.selectLetter} />\n        <Category category={this.state.category} />\n        <Word\n          word={this.state.word}\n          guessedTheWord={this.state.guessedTheWord}\n        />\n        <div className=\"footer\">\n          <GuessesLeft guessesLeft={this.state.guessesLeft} />\n          <GameResult\n            guessedTheWord={this.state.guessedTheWord}\n            guessesLeft={this.state.guessesLeft}\n          />\n          <LanguageSwitcher\n            languages={languages}\n            onClick={this.changeLanguage}\n          />\n          <NewWord onClick={this.startNewGame} />\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}