{"version":3,"sources":["components/Letter/index.tsx","components/Alphabet/index.tsx","components/Category/index.tsx","components/GameResult/index.tsx","components/GuessesLeft/index.tsx","components/Flag/index.tsx","components/LanguageSwitcher/index.tsx","components/NewWord/index.tsx","components/Word/index.tsx","dictionaries/dictionary-en.ts","dictionaries/dictionary-fi.ts","dictionaries/dictionary-es.ts","containers/App/index.tsx","index.tsx"],"names":["renderLetterElement","letter","disabled","role","ariaLabel","aria-label","Letter","onClick","classes","classNames","space","dash","className","aria-disabled","Alphabet","letters","map","index","key","Category","category","aria-describedby","id","GameResult","guessedTheWord","guessesLeft","inProgress","aria-hidden","lastChance","lost","won","GuessesLeft","Flag","language","flagClasses","LanguageSwitcher","languages","NewWord","getAriaLabel","word","pronouncedWord","join","Word","dictionary_en","words","dictionary_fi","dictionary_es","App","props","state","initialState","changeLanguage","bind","selectLetter","startNewGame","addKeyPressListener","alphabet","this","getAlphabet","Array","from","dictionaries","getDictionaries","dictionary","get","randomCategory","randomWord","guessedLetters","Set","Map","set","categories","entries","entry","object","push","Math","floor","random","length","toUpperCase","setState","selectedLetter","updateGameStatus","nextState","alreadyGuessedLetter","has","add","find","filter","includes","every","lettersFoundInWord","forEach","document","addEventListener","event","Component","ReactDOM","render","getElementById"],"mappings":"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CACEvB,SAAU,SACVwB,MAAO,CACL,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aAGJ,CACExB,SAAU,UACVwB,MAAO,CAAC,SAAU,SAAU,SAAU,WAExC,CACExB,SAAU,eACVwB,MAAO,CACL,SACA,UACA,YACA,WACA,SACA,WACA,WAGJ,CACExB,SAAU,OACVwB,MAAO,CACL,MACA,MACA,UACA,aACA,SACA,SACA,eAGJ,CACExB,SAAU,kBACVwB,MAAO,CACL,OACA,QACA,WACA,UACA,QACA,QACA,QACA,WACA,QACA,WACA,SACA,UACA,aACA,gBAGJ,CACExB,SAAU,OACVwB,MAAO,CACL,QACA,QACA,UACA,YACA,eACA,YACA,YACA,kBAGJ,CACExB,SAAU,SACVwB,MAAO,CACL,WACA,mBACA,cACA,QACA,OACA,aACA,eACA,kBACA,gBACA,OACA,UACA,MACA,UAGJ,CACExB,SAAU,YACVwB,MAAO,CAAC,OAAQ,OAAQ,QAAS,MAAO,YAAa,UAAW,aAElE,CACExB,SAAU,SACVwB,MAAO,CACL,SACA,aACA,WACA,aACA,aACA,gBACA,YACA,eACA,iBACA,cACA,cAGJ,CACExB,SAAU,uBACVwB,MAAO,CACL,aACA,YACA,mBACA,iBACA,WACA,YACA,aACA,cACA,iBACA,gBACA,iBACA,OACA,OACA,WACA,kBAGJ,CACExB,SAAU,SACVwB,MAAO,CACL,MACA,QACA,QACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,QACA,SACA,eCiGSC,EAxPyB,CACtC,CACEzB,SAAU,YACVwB,MAAO,CACL,WACA,WACA,YACA,WACA,WACA,aACA,cACA,SACA,UACA,UACA,YACA,aAGJ,CACExB,SAAU,aACVwB,MAAO,CAAC,WAAS,UAAQ,QAAS,UAEpC,CACExB,SAAU,qBACVwB,MAAO,CACL,YACA,UACA,cACA,UACA,YACA,WACA,cAGJ,CACExB,SAAU,qBACVwB,MAAO,CACL,QACA,QACA,WACA,QACA,aACA,YACA,eAGJ,CACExB,SAAU,sBACVwB,MAAO,CACL,QACA,OACA,QACA,QACA,QACA,QACA,WACA,cACA,QACA,QACA,WACA,gBAGJ,CACExB,SAAU,QACVwB,MAAO,CACL,OACA,WACA,QACA,SACA,SACA,QACA,QACA,OACA,UACA,YACA,SACA,UACA,QACA,SACA,SAGJ,CACExB,SAAU,QACVwB,MAAO,CACL,UACA,sBACA,QACA,QACA,cACA,WACA,cACA,YACA,aACA,cACA,cACA,QACA,WACA,YAGJ,CACExB,SAAU,QACVwB,MAAO,CACL,mBACA,UACA,QACA,aACA,aACA,iBACA,gBACA,sBACA,mBACA,aACA,aACA,UAGJ,CACExB,SAAU,qBACVwB,MAAO,CACL,UACA,SACA,QACA,UACA,SACA,aACA,YACA,aACA,SACA,UACA,YACA,WACA,UACA,YACA,0BAGJ,CACExB,SAAU,SACVwB,MAAO,CACL,WACA,eACA,YACA,OACA,QACA,WACA,iBACA,aACA,mBACA,OACA,QACA,QACA,cAGJ,CACExB,SAAU,aACVwB,MAAO,CACL,cACA,QACA,QACA,WACA,aACA,UACA,cAGJ,CACExB,SAAU,OACVwB,MAAO,CACL,QACA,WACA,QACA,WACA,QACA,QACA,UACA,SACA,UAGJ,CACExB,SAAU,YACVwB,MAAO,CACL,aACA,iBACA,cACA,sBACA,cAGJ,CACExB,SAAU,eACVwB,MAAO,CACL,aACA,YACA,eACA,aACA,kBACA,sBACA,YACA,eACA,gBACA,eACA,cAGJ,CACExB,SAAU,oBACVwB,MAAO,CACL,aACA,YACA,mBACA,iBACA,WACA,YACA,aACA,cACA,iBACA,gBACA,iBACA,OACA,OACA,WACA,kBAGJ,CACExB,SAAU,WACVwB,MAAO,CACL,WACA,YACA,UACA,QACA,YACA,YACA,kBACA,UACA,WACA,WACA,SACA,YCnNSE,EAhCyB,CACtC,CACE1B,SAAU,mBACVwB,MAAO,CACL,QACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,aACA,UACA,YACA,cAGJ,CACExB,SAAU,uBACVwB,MAAO,CACL,QACA,SACA,eACA,SA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","file":"static/js/main.9098e83f.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport './Letter.css'\n\ninterface Props {\n  disabled: boolean\n  letter: string\n  onClick(letter: string): void\n  role?: string\n}\n\nconst Letter: FunctionComponent<Props> = ({\n  disabled,\n  letter,\n  onClick,\n  role\n}) => {\n  const classes = classNames(\n    'Letter',\n    { space: letter === ' ' },\n    { dash: letter === '-' },\n    { disabled: disabled }\n  )\n\n  return (\n    <li\n      className={classes}\n      role={role}\n      onClick={() => onClick(letter)}\n      aria-disabled={disabled ? 'true' : false}\n    >\n      {renderLetterElement(letter, disabled, role)}\n    </li>\n  )\n}\n\nconst renderLetterElement = (\n  letter: string,\n  disabled: boolean,\n  role?: string\n) => {\n  if (role === 'button') {\n    const ariaLabel: string = disabled ? letter : 'blank'\n\n    return (\n      <button aria-label={ariaLabel} disabled={disabled}>\n        {letter}\n      </button>\n    )\n  } else if (letter === '-') {\n    return <span>{letter}</span>\n  } else if (!disabled) {\n    return <span>&nbsp;</span>\n  }\n\n  return <span>{letter}</span>\n}\n\nLetter.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  letter: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  role: PropTypes.string\n}\n\nexport interface LetterType {\n  letter: string\n  disabled: boolean\n}\n\nexport default Letter\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Letter, { LetterType } from '../Letter'\nimport './Alphabet.css'\n\ninterface Props {\n  letters: LetterType[]\n  onClick(letter: string): void\n}\n\nconst Alphabet: FunctionComponent<Props> = ({ letters, onClick }) => (\n  <ul className=\"Alphabet\">\n    {[...letters].map((letter, index) => {\n      return (\n        <Letter\n          key={index}\n          letter={letter.letter}\n          disabled={letter.disabled}\n          onClick={onClick}\n          role=\"button\"\n        />\n      )\n    })}\n  </ul>\n)\n\nAlphabet.propTypes = {\n  letters: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Alphabet\n","import React, { Fragment, FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './Category.css'\n\ninterface Props {\n  category: any\n}\n\nconst Category: FunctionComponent<Props> = ({ category }) => {\n  const ariaLabel: string = `Category: ${category.category}.`\n  const ariaDescribedBy: string = 'category-description'\n\n  return (\n    <Fragment>\n      <div\n        className=\"Category\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n      >\n        {category.category}\n      </div>\n      <p id={ariaDescribedBy} className=\"sr-only\">\n        This is the category of the word to guess. Use keyboard to guess\n        letters.\n      </p>\n    </Fragment>\n  )\n}\n\nCategory.propTypes = {\n  category: PropTypes.object.isRequired\n}\n\nexport default Category\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './GameResult.css'\n\ninterface Props {\n  guessedTheWord: boolean\n  guessesLeft: number\n}\n\nconst GameResult: FunctionComponent<Props> = ({\n  guessedTheWord,\n  guessesLeft\n}) => {\n  const inProgress = <i className=\"fa fa-smile-o\" aria-hidden=\"true\" />\n  const lastChance = <i className=\"fa fa-meh-o\" aria-hidden=\"true\" />\n  const lost = <i className=\"fa fa-frown-o\" aria-hidden=\"true\" />\n  const won = <i className=\"fa fa-thumbs-o-up\" aria-hidden=\"true\" />\n\n  return guessedTheWord ? (\n    <div className=\"GameResult\" aria-label=\"You won the game! Congratulations!\">\n      {won}\n    </div>\n  ) : guessesLeft > 1 ? (\n    <div className=\"GameResult\" aria-label=\"Game is in progress.\">\n      {inProgress}\n    </div>\n  ) : guessesLeft === 1 ? (\n    <div\n      className=\"GameResult\"\n      aria-label=\"You can guess wrong only one more time.\"\n    >\n      {lastChance}\n    </div>\n  ) : (\n    <div className=\"GameResult\" aria-label=\"You lost the game. Try again!\">\n      {lost}\n    </div>\n  )\n}\n\nGameResult.propTypes = {\n  guessedTheWord: PropTypes.bool.isRequired,\n  guessesLeft: PropTypes.number.isRequired\n}\n\nexport default GameResult\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './GuessesLeft.css'\n\ninterface Props {\n  guessesLeft: number\n}\n\nconst GuessesLeft: FunctionComponent<Props> = ({ guessesLeft }) => {\n  const ariaLabel: string = `Guesses left: ${guessesLeft}`\n\n  return (\n    <div className=\"GuessesLeft\" aria-label={ariaLabel}>\n      {guessesLeft}\n    </div>\n  )\n}\n\nGuessesLeft.propTypes = {\n  guessesLeft: PropTypes.number.isRequired\n}\n\nexport default GuessesLeft\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport '../../../node_modules/flag-icon-css/css/flag-icon.min.css'\nimport './Flag.css'\n\ninterface Props {\n  language: string\n  onClick(language: string): void\n}\n\nconst Flag: FunctionComponent<Props> = ({ language, onClick }) => {\n  const ariaLabel: string = `Change language to \"${language}\"`\n  const flagClasses: string = `flag-icon flag-icon-${language}`\n\n  return (\n    <button\n      className=\"Flag\"\n      onClick={() => onClick(language)}\n      aria-label={ariaLabel}\n    >\n      <span className={flagClasses}>&nbsp;</span>\n    </button>\n  )\n}\n\nFlag.propTypes = {\n  language: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Flag\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Flag from '../Flag'\nimport './LanguageSwitcher.css'\n\ninterface Props {\n  languages: string[]\n  onClick(language: string): void\n}\n\nconst LanguageSwitcher: FunctionComponent<Props> = ({ languages, onClick }) => (\n  <div className=\"LanguageSwitcher\">\n    {[...languages].map(language => (\n      <Flag key={language} language={language} onClick={onClick}>\n        {language}\n      </Flag>\n    ))}\n  </div>\n)\n\nLanguageSwitcher.propTypes = {\n  languages: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default LanguageSwitcher\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './NewWord.css'\n\ninterface Props {\n  onClick(): void\n}\n\nconst NewWord: FunctionComponent<Props> = ({ onClick }) => (\n  <button\n    className=\"NewWord\"\n    onClick={() => onClick()}\n    aria-label=\"Start a new game\"\n  >\n    <i className=\"fa fa-arrow-right\" aria-hidden=\"true\" />\n  </button>\n)\n\nNewWord.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default NewWord\n","import React, { Fragment, FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Letter, { LetterType } from '../Letter'\nimport './Word.css'\n\ninterface Props {\n  guessedTheWord: boolean\n  word: LetterType[]\n}\n\nconst Word: FunctionComponent<Props> = ({ guessedTheWord, word }) => {\n  const ariaLabel: string = getAriaLabel(word, guessedTheWord)\n  const ariaDescribedBy: string = 'word-description'\n\n  return (\n    <Fragment>\n      <ul\n        className=\"Word\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n      >\n        {[...word].map((letter, index) => (\n          <Letter\n            key={index}\n            letter={letter.letter}\n            disabled={letter.disabled}\n            onClick={() => {}}\n          />\n        ))}\n      </ul>\n      <p id={ariaDescribedBy} className=\"sr-only\">\n        This is the word to be guessed. Correctly guessed letters are\n        pronounced. Other letters are pronounced as \"blank\" until guessed\n        correctly.\n      </p>\n    </Fragment>\n  )\n}\n\nconst getAriaLabel = (word: LetterType[], guessedTheWord: boolean): string => {\n  const pronouncedWord = guessedTheWord\n    ? word\n    : [...word]\n        .map((letter, index) => (letter.disabled ? letter.letter : 'blank'))\n        .join(', ')\n\n  return `Word: ${pronouncedWord}`\n}\n\nWord.propTypes = {\n  guessedTheWord: PropTypes.bool.isRequired,\n  word: PropTypes.array.isRequired\n}\n\nexport default Word\n","import { DictionaryType } from './'\n\nconst dictionary_en: DictionaryType[] = [\n  {\n    category: 'Months',\n    words: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ]\n  },\n  {\n    category: 'Seasons',\n    words: ['Spring', 'Summer', 'Autumn', 'Winter']\n  },\n  {\n    category: 'Days of week',\n    words: [\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n      'Sunday'\n    ]\n  },\n  {\n    category: 'Pets',\n    words: [\n      'Dog',\n      'Cat',\n      'Hamster',\n      'Guinea pig',\n      'Turtle',\n      'Parrot',\n      'Budgerigar'\n    ]\n  },\n  {\n    category: 'African animals',\n    words: [\n      'Lion',\n      'Camel',\n      'Elephant',\n      'Giraffe',\n      'Zebra',\n      'Rhino',\n      'Hippo',\n      'Antelope',\n      'Hyena',\n      'Scorpion',\n      'Baboon',\n      'Gorilla',\n      'Chimpanzee',\n      'Constrictor'\n    ]\n  },\n  {\n    category: 'Food',\n    words: [\n      'Pasta',\n      'Pizza',\n      'Lasagne',\n      'Meatballs',\n      'Chicken soup',\n      'Fish soup',\n      'Hamburger',\n      'Cooked salmon'\n    ]\n  },\n  {\n    category: 'Drinks',\n    words: [\n      'Lemonade',\n      'Strawberry juice',\n      'Apple juice',\n      'Water',\n      'Milk',\n      'Buttermilk',\n      'Orange juice',\n      'Pineapple juice',\n      'Mineral water',\n      'Beer',\n      'Whiskey',\n      'Rum',\n      'Kvass'\n    ]\n  },\n  {\n    category: 'Furniture',\n    words: ['Desk', 'Sofa', 'Chair', 'Bed', 'Bookshelf', 'Dresser', 'Armchair']\n  },\n  {\n    category: 'Sports',\n    words: [\n      'Soccer',\n      'Basketball',\n      'Handball',\n      'Volleyball',\n      'Ice hockey',\n      'Javelin throw',\n      'Floorball',\n      'Discus throw',\n      'Figure skating',\n      'Ski jumping',\n      'Triathlon'\n    ]\n  },\n  {\n    category: 'Star Wars characters',\n    words: [\n      'Jango Fett',\n      'Boba Fett',\n      'Anakin Skywalker',\n      'Luke Skywalker',\n      'Han Solo',\n      'Chewbacca',\n      'Darth Maul',\n      'Darth Vader',\n      'Jabba the Hutt',\n      'Jar Jar Binks',\n      'Obi-Wan Kenobi',\n      'Yoda',\n      'Finn',\n      'Kylo Ren',\n      'Darth Sidious'\n    ]\n  },\n  {\n    category: 'Colors',\n    words: [\n      'Red',\n      'Green',\n      'Black',\n      'Blue',\n      'Yellow',\n      'White',\n      'Grey',\n      'Pink',\n      'Orange',\n      'Purple',\n      'Brown',\n      'Violet',\n      'Turquoise'\n    ]\n  }\n]\n\nexport default dictionary_en\n","import { DictionaryType } from './'\n\nconst dictionary_fi: DictionaryType[] = [\n  {\n    category: 'Kuukaudet',\n    words: [\n      'Tammikuu',\n      'Helmikuu',\n      'Maaliskuu',\n      'Huhtikuu',\n      'Toukukuu',\n      'Kesäkuu',\n      'Heinäkuu',\n      'Elokuu',\n      'Syyskuu',\n      'Lokakuu',\n      'Marraskuu',\n      'Joulukuu'\n    ]\n  },\n  {\n    category: 'Vuodenajat',\n    words: ['Kevät', 'Kesä', 'Syksy', 'Talvi']\n  },\n  {\n    category: 'Viikonpäivät',\n    words: [\n      'Maanantai',\n      'Tiistai',\n      'Keskiviikko',\n      'Torstai',\n      'Perjantai',\n      'Lauantai',\n      'Sunnuntai'\n    ]\n  },\n  {\n    category: 'Lemmikkieläimet',\n    words: [\n      'Koira',\n      'Kissa',\n      'Hamsteri',\n      'Marsu',\n      'Kilpikonna',\n      'Papukaija',\n      'Undulaatti'\n    ]\n  },\n  {\n    category: 'Metsäneläimet',\n    words: [\n      'Karhu',\n      'Susi',\n      'Kettu',\n      'Hirvi',\n      'Peura',\n      'Orava',\n      'Jänis',\n      'Pöllö',\n      'Siili',\n      'Hiiri',\n      'Myyrä',\n      'Liito-orava'\n    ]\n  },\n  {\n    category: 'Kalat',\n    words: [\n      'Made',\n      'Särki',\n      'Ahven',\n      'Muikku',\n      'Taimen',\n      'Hauki',\n      'Siika',\n      'Lohi',\n      'Silakka',\n      'Kirjolohi',\n      'Harjus',\n      'Kampela',\n      'Lahna',\n      'Kiiski',\n      'Kuha'\n    ]\n  },\n  {\n    category: 'Kukat',\n    words: [\n      'Orkidea',\n      'Päivänkakkara',\n      'Kielo',\n      'Ruusu',\n      'Kissankello',\n      'Voikukka',\n      'Leskenlehti',\n      'Tulppaani',\n      'Sinivuokko',\n      'Valkovuokko',\n      'Keltavuokko',\n      'Apila',\n      'Narsissi',\n      'Lupiini'\n    ]\n  },\n  {\n    category: 'Ruuat',\n    words: [\n      'Makaronilaatikko',\n      'Lasagne',\n      'Pizza',\n      'Lihapullat',\n      'Kalakeitto',\n      'Pinaattikeitto',\n      'Pinaattiletut',\n      'Siskonmakkarakeitto',\n      'Poronkäristys',\n      'Lihakeitto',\n      'Kanakeitto',\n      'Pasta'\n    ]\n  },\n  {\n    category: 'Afrikan eläimet',\n    words: [\n      'Leijona',\n      'Kameli',\n      'Norsu',\n      'Kirahvi',\n      'Seepra',\n      'Sarvikuono',\n      'Virtahepo',\n      'Antilooppi',\n      'Hyeena',\n      'Gebardi',\n      'Skorpioni',\n      'Paviaani',\n      'Gorilla',\n      'Simpanssi',\n      'Kuristajakäärme'\n    ]\n  },\n  {\n    category: 'Juomat',\n    words: [\n      'Limonadi',\n      'Mansikkamehu',\n      'Omenamehu',\n      'Vesi',\n      'Maito',\n      'Piimä',\n      'Appelsiinimehu',\n      'Ananasmehu',\n      'Kivennäisvesi',\n      'Olut',\n      'Viski',\n      'Rommi',\n      'Kotikalja'\n    ]\n  },\n  {\n    category: 'Huonekalut',\n    words: [\n      'Pöytä',\n      'Sohva',\n      'Tuoli',\n      'Sänky',\n      'Kirjahylly',\n      'Lipasto',\n      'Nojatuoli'\n    ]\n  },\n  {\n    category: 'Puut',\n    words: [\n      'Kuusi',\n      'Mänty',\n      'Koivu',\n      'Vaahtera',\n      'Tammi',\n      'Haapa',\n      'Pihlaja',\n      'Saarni',\n      'Tuomi'\n    ]\n  },\n  {\n    category: 'Ajoneuvot',\n    words: [\n      'Linja-auto',\n      'Henkilöauto',\n      'Kuorma-auto',\n      'Moottoripyörä',\n      'Skootteri'\n    ]\n  },\n  {\n    category: 'Urheilulajit',\n    words: [\n      'Jalkapallo',\n      'Koripallo',\n      'Käsipallo',\n      'Lentopallo',\n      'Jääkiekko',\n      'Keihäänheitto',\n      'Salibandy',\n      'Kiekonheitto',\n      'Taitoluistelu',\n      'Mäkihyppy',\n      'Triathlon'\n    ]\n  },\n  {\n    category: 'Star Wars -hahmot',\n    words: [\n      'Jango Fett',\n      'Boba Fett',\n      'Anakin Skywalker',\n      'Luke Skywalker',\n      'Han Solo',\n      'Chewbacca',\n      'Darth Maul',\n      'Darth Vader',\n      'Jabba the Hutt',\n      'Jar Jar Binks',\n      'Obi-Wan Kenobi',\n      'Yoda',\n      'Finn',\n      'Kylo Ren',\n      'Darth Sidious'\n    ]\n  },\n  {\n    category: 'Värit',\n    words: [\n      'Punainen',\n      'Vihreä',\n      'Sininen',\n      'Musta',\n      'Valkoinen',\n      'Keltainen',\n      'Vaaleanpunainen',\n      'Oranssi',\n      'Turkoosi',\n      'Violetti',\n      'Harmaa',\n      'Ruskea'\n    ]\n  }\n]\n\nexport default dictionary_fi\n","import { DictionaryType } from './'\n\nconst dictionary_es: DictionaryType[] = [\n  {\n    category: 'Meses del año',\n    words: [\n      'Enero',\n      'Febrero',\n      'Marzo',\n      'Abril',\n      'Mayo',\n      'Junio',\n      'Julio',\n      'Agosto',\n      'Septiembre',\n      'Octubre',\n      'Noviembre',\n      'Diciembre'\n    ]\n  },\n  {\n    category: 'Días de la semana',\n    words: [\n      'Lunes',\n      'Martes',\n      'Miércoles',\n      'Jueves',\n      'Viernes',\n      'Sábado',\n      'Domingo'\n    ]\n  }\n]\n\nexport default dictionary_es\n","import React, { Component, Fragment } from 'react'\nimport Alphabet from '../../components/Alphabet'\nimport Category from '../../components/Category'\nimport GameResult from '../../components/GameResult'\nimport GuessesLeft from '../../components/GuessesLeft'\nimport LanguageSwitcher from '../../components/LanguageSwitcher'\nimport { LetterType } from '../../components/Letter'\nimport NewWord from '../../components/NewWord'\nimport Word from '../../components/Word'\nimport dictionary_en from '../../dictionaries/dictionary-en'\nimport dictionary_fi from '../../dictionaries/dictionary-fi'\nimport dictionary_es from '../../dictionaries/dictionary-es'\nimport './App.css'\n\ninterface State {\n  alphabet: string\n  letters: LetterType[]\n  category: any\n  guessedLetters: Set<string>\n  guessedTheWord: boolean\n  guessesLeft: number\n  language: string\n  word: LetterType[]\n}\n\nclass App extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props)\n    this.state = this.initialState()\n    this.changeLanguage = this.changeLanguage.bind(this)\n    this.selectLetter = this.selectLetter.bind(this)\n    this.startNewGame = this.startNewGame.bind(this)\n    this.addKeyPressListener()\n  }\n\n  initialState(language: string = 'gb'): State {\n    const alphabet: string = this.getAlphabet(language)\n\n    const letters: LetterType[] = Array.from(alphabet).map(letter => ({\n      letter,\n      disabled: false\n    }))\n\n    const dictionaries = this.getDictionaries()\n    const dictionary: Object | undefined = dictionaries.get(language)\n    const category = this.randomCategory(dictionary)\n\n    const word: LetterType[] = Array.from(this.randomWord(category)).map(\n      letter => ({\n        letter,\n        disabled: false\n      })\n    )\n\n    const guessedLetters: Set<string> = new Set()\n    const guessesLeft: number = 5\n    const guessedTheWord: boolean = false\n\n    return {\n      alphabet,\n      letters,\n      language,\n      category,\n      word,\n      guessedLetters,\n      guessesLeft,\n      guessedTheWord\n    }\n  }\n\n  getAlphabet(language: string): string {\n    const defaultAlphabet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    return language === 'gb'\n      ? defaultAlphabet\n      : language === 'fi'\n      ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ'\n      : language === 'es'\n      ? 'AÁBCDEÉFGHIÍJKLMNÑOÓPQRSTUÚÜVWXYZ'\n      : defaultAlphabet\n  }\n\n  getDictionaries(): Map<string, Object> {\n    const dictionaries: Map<string, Object> = new Map()\n    dictionaries.set('fi', dictionary_fi)\n    dictionaries.set('gb', dictionary_en)\n    dictionaries.set('es', dictionary_es)\n\n    return dictionaries\n  }\n\n  randomCategory(dictionary: any) {\n    const categories = []\n\n    for (const entry of dictionary.entries()) {\n      // eslint-disable-next-line\n      let [index, object] = entry\n      categories.push(object)\n    }\n\n    return categories[Math.floor(Math.random() * categories.length)]\n  }\n\n  randomWord(category: { words: string[] }): string {\n    return category.words[\n      Math.floor(Math.random() * category.words.length)\n    ].toUpperCase()\n  }\n\n  changeLanguage(language: string): void {\n    this.setState(this.initialState(language))\n  }\n\n  selectLetter(selectedLetter: string): void {\n    this.updateGameStatus(this.state, selectedLetter)\n  }\n\n  updateGameStatus(state: State, selectedLetter: string): void {\n    if (state.guessesLeft > 0 && !state.guessedTheWord) {\n      const nextState: State = { ...state }\n      const alreadyGuessedLetter: boolean = state.guessedLetters.has(\n        selectedLetter\n      )\n\n      if (!alreadyGuessedLetter) {\n        nextState.guessedLetters.add(selectedLetter)\n        const letter: LetterType | undefined = nextState.letters.find(\n          letter => letter.letter === selectedLetter\n        )\n\n        if (letter) {\n          letter.disabled = true\n        }\n      }\n\n      const guessedTheWord: boolean = nextState.word\n        .filter(letter => !['-', ' '].includes(letter.letter))\n        .every(letter => nextState.guessedLetters.has(letter.letter))\n\n      const lettersFoundInWord: boolean =\n        nextState.word.filter(letter => letter.letter === selectedLetter)\n          .length > 0\n\n      if (guessedTheWord) {\n        nextState.guessedTheWord = true\n      } else if (!alreadyGuessedLetter && !lettersFoundInWord) {\n        nextState.guessesLeft--\n      }\n\n      nextState.word.forEach(letter =>\n        letter.letter === selectedLetter ? (letter.disabled = true) : ''\n      )\n\n      this.setState(nextState)\n    }\n  }\n\n  startNewGame(): void {\n    this.setState(this.initialState(this.state.language))\n  }\n\n  addKeyPressListener(): void {\n    document.addEventListener('keydown', event => {\n      const letter: string = event.key.toUpperCase()\n\n      if (this.state.alphabet.includes(letter)) {\n        this.selectLetter(letter)\n      }\n    })\n  }\n\n  render() {\n    const languages: string[] = ['fi', 'gb', 'es']\n\n    return (\n      <Fragment>\n        <p className=\"sr-only\">\n          Welcome to play word guess game. Try to guess the word from the given\n          category. Use keyboard to guess the letters.\n        </p>\n        <Alphabet letters={this.state.letters} onClick={this.selectLetter} />\n        <Category category={this.state.category} />\n        <Word\n          word={this.state.word}\n          guessedTheWord={this.state.guessedTheWord}\n        />\n        <div className=\"footer\">\n          <GuessesLeft guessesLeft={this.state.guessesLeft} />\n          <GameResult\n            guessedTheWord={this.state.guessedTheWord}\n            guessesLeft={this.state.guessesLeft}\n          />\n          <LanguageSwitcher\n            languages={languages}\n            onClick={this.changeLanguage}\n          />\n          <NewWord onClick={this.startNewGame} />\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}